function [R,t,E,info] = gOp(v,X_,opt)
%
% [R,t] = gOp(v,X)
%
% returns the global optimum pose 
% such that 
%  sum_i norm( Q*(R*X+t+c) ) is minimal 
%
% Q = eye(3)-v*v'/norm(v)^2
%
%
% opt.methode ='3D' -> we are 100 % sure that is is a 3d model 
% opt.methode ='choose best' -> we are not sure, but take the best result 
% opt.methode ='choose +t'   -> we take the best solution with t(3) > 0
%
% opt.acc = 1e-9 -> accuracy of the sedumi solver 
%
% Author: Gerald Schweighofer
 
%% what happens with that equation 
%% (R*X+t+c)'*Q*(R*X+t+c)
%%

% get the Model  
if size(v,1) == 6, %% this is for general camera model
   c = v(4:6,:);
   v = v(1:3,:);
else
   c = zeros(size(v));
end


if ~isfield(opt,'acc'), 
  opt.acc = 1e-9;
end


if strcmp( opt.methode , '3D' ),
  % we call the 3d Estimator
   t_ = tic;
 
   [M,Mc,Mcc]=genrMr_gcm(X_,v,c);
   %% Mcc is a constant and therefor not used in the optimization 
   [R,t,ok,info] = solve_sdp(@error_to_sedumi,M,Mc,Mcc,opt.acc,X_,v,c);
   info.time_global_pose = (double(tic) - double(t_))/1e6;

    if ~ok,
     disp('Error -> try the other options for planar cases ');
     return;
   end

else
  t_ = tic;
  %% if we have a planar like structure -> bring it into [x,x,const] form !!
  pl = fitplane(X_);
  n = normRv(pl(1:3));

  if abs(n(3)) == 1,
    R_ = eye(3);
  else
    R_ = rpyMat([pi/2 0 0])*getRotation([0;1;0]',n');
  end

  %R_*X
  X = R_*X_;

  [M,Mc,Mcc]=genrMr_gcm(X,v,c);

  %% if we are unsure if there is a planar target  
  %% we call both 

  [R1,t1,ok1,info1] = solve_sdp(@error_to_sedumi_planar,M,Mc,Mcc,opt.acc,X,v,c);

  %% check the absolute value of the rotation -> if it is close to zero we get a problem !
  if ok1,
    if abs(R1(1,1)) < 0.2,
      %% simple approach -> change the rotation 
          
      R_ = rpyMat([0 0 pi/2])*R_;
      X = R_*X_;
      [M,Mc,Mcc]=genrMr_gcm(X,v,c);
      
      [R1,t1,ok1,info1] = solve_sdp(@error_to_sedumi_planar,M,Mc,Mcc,opt.acc,X,v,c);
   
    end
  end
  
  [R2,t2,ok2,info2] = solve_sdp(@error_to_sedumi_planar_inv,M,Mc,Mcc,opt.acc,X,v,c);
  
  if ok1~= 1 || ok2~= 1
      disp('The SDP relaxation is not tight!')
  end
  %% remove the rotation of the beginning 
  %% X = R_*X;
  %%  Ri*X+t -> Ri*R_*X + t
  %% 
  
  info1.time_global_pose = (double(tic) - double(t_))/1e6;
  info2.time_global_pose =  info1.time_global_pose; 

  %% sum up the timings !
  time_sedum_call = info1.time_sedum_call + info2.time_sedum_call;
  info1.time_sedum_call = time_sedum_call;
  info2.time_sedum_call = time_sedum_call;

  e=[];
  %if ok1,
    R1 = R1*R_;
%     e(end+1).e = get_Error(R1,t1,X_,v,c);
%     e(end).R = R1;
%     e(end).t = t1;
%     e(end).info = info1;
  %end
  %if ok2,
    R2 = R2*R_;
%     e(end+1).e = get_Error(R2,t2,X_,v,c);
%     e(end).R = R2;
%     e(end).t = t2;
%     e(end).info = info2;
  %end
 
  %% take the best 
  if strcmp( opt.methode , 'choose best' ),
%     try
%         ee = cat(1,e.e);
%     catch
%         R = []; t = []; E = []; info = []; 
%         return;
%     end
%     fi = find( ee == min(ee) );
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% the original code usually makes mistakes in choosing the solution
% to avoid this problem, I change this scheme by directly returning 
% all two solutions.
    R(:,:,1) = R1; R(:,:,2) = R2; 
    t(:,1) = t1; t(:,2) = t2;
    return;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  else
    if strcmp( opt.methode , 'choose +t' )
      ee = cat(2,e.t);
      fi = find( ee(3,:) > 0 );
      if length(fi) > 1, 
        disp('There are two solutions with t(3) > 0  :-) ');
        %% take the best one 
	e = e(fi);
        ee = cat(1,e.e);
        fi = find( ee == min(ee) );
      end
    else
      disp('something went wrong -> bad option ');
      kl
    end
  end
 
  if length(fi) < 1,
    disp('No Solution found'); 
    kl
    %% we schould use the constrainained t_opt(3) > 0 -> in that case !!
    %% and not the R(1,1) > 0 
    %% That's not implemented yet -> but should be no problem :-)  

    %% An error happens if R(1,1) is close to zereo so that R(1,1) = 0 is a good solution 
    %% then we get that as a result 
  end

  fi=fi(1);
  R = e(fi).R;
  t = e(fi).t;
  info = e(fi).info;
end

  %% estimate the true value of that function
  r = R'; r=r(:);
  info.ErrorM = r' * M * r + Mc.'*r + Mcc;

if nargout >= 3
  E=get_Error(R,t,X_,v,c);
end


return;


%% ------------------- helper functions --------------------------
function [R,t,ok,info] = solve_sdp(fun,M,Mc,Mcc,acc,X,v,c)


   % [At_,b_,c_,K_,pars_] = error_to_sedumi(M,Mc,Mcc);
   [At_,b_,c_,K_,pars_] = feval(fun,M,Mc,Mcc);
   pars_.eps = acc;
   pars_.fid = 0;

   % Here we tried other solvers :-( without any luck   
   %At = At_; b=b_;c=c_;K=K_;
   %save  /var/tmp/sedumi.mat At b c K - V4;
   % addpath /var/tmp/SDPT3-4.0-beta/
   % addpath /var/tmp/SDPT3-4.0-beta/Solver/
   % addpath /var/tmp/SDPT3-4.0-beta/Solver/Mexfun
   % [blk,At,C,b] = read_sedumi(At_,b_,c_,K_);
   % [obj,X,y,Z] = sqlp(blk,At,C,b);
   % %solve csdp -> no free variables supported !
   % [x,y,z,info]=csdp(At_,b_,c_,K_,pars_)

   % solve sedumi
   t = tic;
   [x,y,info] = sedumi(At_,b_,c_,K_,pars_);
   info.time_sedum_call = (double(tic) - double(t))/1e6;

    % extract the solution
    opt = -y([ 36 16 6 2]);
    gam = x(16);   

    info.gamma = gam + Mcc;  %% thats the lower bound of the system 
    
    % get the translation 
    R = quat2mat( opt )';

    if norm( det(R)-1 ) > 1e-3,
       %disp('Sedumi Failed -> are you sure you don t have a planar target');
       ok = 0; %t=[];
       t=get_opt_t(R,X,v,c);
     else
       t=get_opt_t(R,X,v,c);
       ok = 1;
     end
   


function e=get_Error(R,t,X,v,c)
  clear V
 for pi_=1:size(v,2),
   V(pi_).V= (v(:,pi_)*v(:,pi_)')./(v(:,pi_)'*v(:,pi_));
 end
 e = 0;
 for pi_=1:size(v,2),
   ei =  (V(pi_).V-eye(3)) * (R*X(:,pi_)+t+c(:,pi_));
   e = e + ei'*ei;
   end


function t=get_opt_t(R,X,v,c)
 clear V
 for pi_=1:size(v,2),
   V(pi_).V= (v(:,pi_)*v(:,pi_)')./(v(:,pi_)'*v(:,pi_));
 end

    G=zeros(3);
    for pi_=1:size(v,2),
      G=G+ V(pi_).V;
    end
    G=inv(eye(3)-G/size(v,2))/size(v,2);
    
    t_opt = zeros(3,1) ;
    for pi_=1:size(v,2),
      t_opt = t_opt + (V(pi_).V-eye(3))*(R*X(:,pi_)+c(:,pi_));
    end
    t = G*t_opt;
    
function [At,b,c,K,pars] =  error_to_sedumi_planar_inv(M,Mc,Mcc)
%
% transfers the function r'*M*r+r'*Mc+Mcc  with planar case 
% -> M([3,6,9],:)  approx zero  
% -> M(:,[3,6,9])  approx zero  
%
% constrains: r1 > 0 , ||r1..4|| = 1
% constrains: R(1,1) < 0 -> to fix the scale of the Rotation 
% but we use the data in it -> to get a better solution !
%

m11 = M(1,1);
m12 = M(1,2);
m13 = M(1,3);
m14 = M(1,4);
m15 = M(1,5);
m16 = M(1,6);
m17 = M(1,7);
m18 = M(1,8);
m19 = M(1,9);
mc1 = Mc(1);
m22 = M(2,2);
m23 = M(2,3);
m24 = M(2,4);
m25 = M(2,5);
m26 = M(2,6);
m27 = M(2,7);
m28 = M(2,8);
m29 = M(2,9);
mc2 = Mc(2);
m33 = M(3,3);
m34 = M(3,4);
m35 = M(3,5);
m36 = M(3,6);
m37 = M(3,7);
m38 = M(3,8);
m39 = M(3,9);
mc3 = Mc(3);
m44 = M(4,4);
m45 = M(4,5);
m46 = M(4,6);
m47 = M(4,7);
m48 = M(4,8);
m49 = M(4,9);
mc4 = Mc(4);
m55 = M(5,5);
m56 = M(5,6);
m57 = M(5,7);
m58 = M(5,8);
m59 = M(5,9);
mc5 = Mc(5);
m66 = M(6,6);
m67 = M(6,7);
m68 = M(6,8);
m69 = M(6,9);
mc6 = Mc(6);
m77 = M(7,7);
m78 = M(7,8);
m79 = M(7,9);
mc7 = Mc(7);
m88 = M(8,8);
m89 = M(8,9);
mc8 = Mc(8);
m99 = M(9,9);
mc9 = Mc(9);

pars.eps = 1e-12;
pars.alg = 2;
K.s=[5   5   1  15];
K.f=[16];
At=sparse(zeros([292   70]));
At(1,1)=-1;
At(1,3)=1;
At(1,10)=1;
At(1,26)=1;
At(1,56)=1;
At(2,36)=-1;
At(2,38)=1;
At(2,43)=1;
At(2,52)=1;
At(2,66)=1;
At(3,16)=-1;
At(3,18)=1;
At(3,23)=1;
At(3,32)=1;
At(3,62)=1;
At(4,6)=-1;
At(4,8)=1;
At(4,13)=1;
At(4,29)=1;
At(4,59)=1;
At(5,2)=-1;
At(5,4)=1;
At(5,11)=1;
At(5,27)=1;
At(5,57)=1;
At(6,56)=-1;
At(6,58)=1;
At(6,61)=1;
At(6,65)=1;
At(6,70)=1;
At(7,46)=-1;
At(7,48)=1;
At(7,51)=1;
At(7,55)=1;
At(7,69)=1;
At(8,26)=-1;
At(8,28)=1;
At(8,31)=1;
At(8,35)=1;
At(8,65)=1;
At(9,40)=-1;
At(9,42)=1;
At(9,45)=1;
At(9,54)=1;
At(9,68)=1;
At(10,20)=-1;
At(10,22)=1;
At(10,25)=1;
At(10,34)=1;
At(10,64)=1;
At(11,10)=-1;
At(11,12)=1;
At(11,15)=1;
At(11,31)=1;
At(11,61)=1;
At(12,37)=-1;
At(12,39)=1;
At(12,44)=1;
At(12,53)=1;
At(12,67)=1;
At(13,17)=-1;
At(13,19)=1;
At(13,24)=1;
At(13,33)=1;
At(13,63)=1;
At(14,7)=-1;
At(14,9)=1;
At(14,14)=1;
At(14,30)=1;
At(14,60)=1;
At(15,3)=-1;
At(15,5)=1;
At(15,12)=1;
At(15,28)=1;
At(15,58)=1;
At(16,1)=1;
At(17,3)=1;
At(17,10)=1;
At(17,26)=-1;
At(17,56)=-1;
At(18,38)=1;
At(18,43)=1;
At(18,52)=-1;
At(18,66)=-1;
At(19,18)=1;
At(19,23)=1;
At(19,32)=-1;
At(19,62)=-1;
At(20,8)=1;
At(20,13)=1;
At(20,29)=-1;
At(20,59)=-1;
At(21,4)=1;
At(21,11)=1;
At(21,27)=-1;
At(21,57)=-1;
At(22,38)=1;
At(22,43)=1;
At(22,52)=-1;
At(22,66)=-1;
At(23,58)=1;
At(23,61)=1;
At(23,65)=-1;
At(23,70)=-1;
At(24,48)=1;
At(24,51)=1;
At(24,55)=-1;
At(24,69)=-1;
At(25,42)=1;
At(25,45)=1;
At(25,54)=-1;
At(25,68)=-1;
At(26,39)=1;
At(26,44)=1;
At(26,53)=-1;
At(26,67)=-1;
At(27,18)=1;
At(27,23)=1;
At(27,32)=-1;
At(27,62)=-1;
At(28,48)=1;
At(28,51)=1;
At(28,55)=-1;
At(28,69)=-1;
At(29,28)=1;
At(29,31)=1;
At(29,35)=-1;
At(29,65)=-1;
At(30,22)=1;
At(30,25)=1;
At(30,34)=-1;
At(30,64)=-1;
At(31,19)=1;
At(31,24)=1;
At(31,33)=-1;
At(31,63)=-1;
At(32,8)=1;
At(32,13)=1;
At(32,29)=-1;
At(32,59)=-1;
At(33,42)=1;
At(33,45)=1;
At(33,54)=-1;
At(33,68)=-1;
At(34,22)=1;
At(34,25)=1;
At(34,34)=-1;
At(34,64)=-1;
At(35,12)=1;
At(35,15)=1;
At(35,31)=-1;
At(35,61)=-1;
At(36,9)=1;
At(36,14)=1;
At(36,30)=-1;
At(36,60)=-1;
At(37,4)=1;
At(37,11)=1;
At(37,27)=-1;
At(37,57)=-1;
At(38,39)=1;
At(38,44)=1;
At(38,53)=-1;
At(38,67)=-1;
At(39,19)=1;
At(39,24)=1;
At(39,33)=-1;
At(39,63)=-1;
At(40,9)=1;
At(40,14)=1;
At(40,30)=-1;
At(40,60)=-1;
At(41,5)=1;
At(41,12)=1;
At(41,28)=-1;
At(41,58)=-1;
At(42,36)=1;
At(43,56)=1;
At(44,46)=1;
At(45,40)=1;
At(46,37)=1;
At(47,56)=1;
At(48,66)=1;
At(49,62)=1;
At(50,59)=1;
At(51,57)=1;
At(52,46)=1;
At(53,62)=1;
At(54,52)=1;
At(55,49)=1;
At(56,47)=1;
At(57,40)=1;
At(58,59)=1;
At(59,49)=1;
At(60,43)=1;
At(61,41)=1;
At(62,37)=1;
At(63,57)=1;
At(64,47)=1;
At(65,41)=1;
At(66,38)=1;
At(67,38)=1;
At(67,43)=1;
At(67,52)=-1;
At(67,66)=-1;
At(68,1)=1;
At(69,36)=1;
At(70,16)=1;
At(71,6)=1;
At(72,2)=1;
At(73,56)=1;
At(74,46)=1;
At(75,26)=1;
At(76,40)=1;
At(77,20)=1;
At(78,10)=1;
At(79,37)=1;
At(80,17)=1;
At(81,7)=1;
At(82,3)=1;
At(83,36)=1;
At(84,56)=1;
At(85,46)=1;
At(86,40)=1;
At(87,37)=1;
At(88,66)=1;
At(89,62)=1;
At(90,52)=1;
At(91,59)=1;
At(92,49)=1;
At(93,43)=1;
At(94,57)=1;
At(95,47)=1;
At(96,41)=1;
At(97,38)=1;
At(98,16)=1;
At(99,46)=1;
At(100,26)=1;
At(101,20)=1;
At(102,17)=1;
At(103,62)=1;
At(104,52)=1;
At(105,32)=1;
At(106,49)=1;
At(107,29)=1;
At(108,23)=1;
At(109,47)=1;
At(110,27)=1;
At(111,21)=1;
At(112,18)=1;
At(113,6)=1;
At(114,40)=1;
At(115,20)=1;
At(116,10)=1;
At(117,7)=1;
At(118,59)=1;
At(119,49)=1;
At(120,29)=1;
At(121,43)=1;
At(122,23)=1;
At(123,13)=1;
At(124,41)=1;
At(125,21)=1;
At(126,11)=1;
At(127,8)=1;
At(128,2)=1;
At(129,37)=1;
At(130,17)=1;
At(131,7)=1;
At(132,3)=1;
At(133,57)=1;
At(134,47)=1;
At(135,27)=1;
At(136,41)=1;
At(137,21)=1;
At(138,11)=1;
At(139,38)=1;
At(140,18)=1;
At(141,8)=1;
At(142,4)=1;
At(143,56)=1;
At(144,66)=1;
At(145,62)=1;
At(146,59)=1;
At(147,57)=1;
At(148,70)=1;
At(149,69)=1;
At(150,65)=1;
At(151,68)=1;
At(152,64)=1;
At(153,61)=1;
At(154,67)=1;
At(155,63)=1;
At(156,60)=1;
At(157,58)=1;
At(158,46)=1;
At(159,62)=1;
At(160,52)=1;
At(161,49)=1;
At(162,47)=1;
At(163,69)=1;
At(164,65)=1;
At(165,55)=1;
At(166,64)=1;
At(167,54)=1;
At(168,51)=1;
At(169,63)=1;
At(170,53)=1;
At(171,50)=1;
At(172,48)=1;
At(173,26)=1;
At(174,52)=1;
At(175,32)=1;
At(176,29)=1;
At(177,27)=1;
At(178,65)=1;
At(179,55)=1;
At(180,35)=1;
At(181,54)=1;
At(182,34)=1;
At(183,31)=1;
At(184,53)=1;
At(185,33)=1;
At(186,30)=1;
At(187,28)=1;
At(188,40)=1;
At(189,59)=1;
At(190,49)=1;
At(191,43)=1;
At(192,41)=1;
At(193,68)=1;
At(194,64)=1;
At(195,54)=1;
At(196,61)=1;
At(197,51)=1;
At(198,45)=1;
At(199,60)=1;
At(200,50)=1;
At(201,44)=1;
At(202,42)=1;
At(203,20)=1;
At(204,49)=1;
At(205,29)=1;
At(206,23)=1;
At(207,21)=1;
At(208,64)=1;
At(209,54)=1;
At(210,34)=1;
At(211,51)=1;
At(212,31)=1;
At(213,25)=1;
At(214,50)=1;
At(215,30)=1;
At(216,24)=1;
At(217,22)=1;
At(218,10)=1;
At(219,43)=1;
At(220,23)=1;
At(221,13)=1;
At(222,11)=1;
At(223,61)=1;
At(224,51)=1;
At(225,31)=1;
At(226,45)=1;
At(227,25)=1;
At(228,15)=1;
At(229,44)=1;
At(230,24)=1;
At(231,14)=1;
At(232,12)=1;
At(233,37)=1;
At(234,57)=1;
At(235,47)=1;
At(236,41)=1;
At(237,38)=1;
At(238,67)=1;
At(239,63)=1;
At(240,53)=1;
At(241,60)=1;
At(242,50)=1;
At(243,44)=1;
At(244,58)=1;
At(245,48)=1;
At(246,42)=1;
At(247,39)=1;
At(248,17)=1;
At(249,47)=1;
At(250,27)=1;
At(251,21)=1;
At(252,18)=1;
At(253,63)=1;
At(254,53)=1;
At(255,33)=1;
At(256,50)=1;
At(257,30)=1;
At(258,24)=1;
At(259,48)=1;
At(260,28)=1;
At(261,22)=1;
At(262,19)=1;
At(263,7)=1;
At(264,41)=1;
At(265,21)=1;
At(266,11)=1;
At(267,8)=1;
At(268,60)=1;
At(269,50)=1;
At(270,30)=1;
At(271,44)=1;
At(272,24)=1;
At(273,14)=1;
At(274,42)=1;
At(275,22)=1;
At(276,12)=1;
At(277,9)=1;
At(278,3)=1;
At(279,38)=1;
At(280,18)=1;
At(281,8)=1;
At(282,4)=1;
At(283,58)=1;
At(284,48)=1;
At(285,28)=1;
At(286,42)=1;
At(287,22)=1;
At(288,12)=1;
At(289,39)=1;
At(290,19)=1;
At(291,9)=1;
At(292,5)=1;
b=sparse(zeros([70   1]));
b(3)=mc9-mc5-mc1;
b(5)=m55-2*m59+m11-2*m19+2*m15+m99;
b(7)=2*mc8+2*mc6;
b(9)=-4*m18+4*m69-4*m58+4*m89-4*m56-4*m16;
b(10)=mc5-mc9-mc1;
b(12)=2*m11+4*m88+8*m68-2*m55+4*m59-2*m99+4*m66;
b(14)=-4*m18-4*m16-4*m89-4*m69+4*m56+4*m58;
b(15)=m11+m55+m99+2*m19-2*m59-2*m15;
b(17)=2*mc7+2*mc3;
b(19)=4*m79-4*m35-4*m13+4*m39-4*m57-4*m17;
b(20)=2*mc2+2*mc4;
b(22)=4*m49+8*m36+8*m67-4*m14+4*m29-4*m45+8*m78-4*m12+8*m38-4*m25;
b(24)=-4*m79+8*m48-4*m13-4*m17+4*m57+8*m46+8*m26+4*m35-4*m39+8*m28;
b(25)=4*m45-4*m14+4*m25-4*m12-4*m29-4*m49;
b(26)=mc1-mc5-mc9;
b(28)=2*m55+4*m19-2*m11+4*m77+8*m37-2*m99+4*m33;
b(30)=4*m16+8*m23+8*m34+4*m18-4*m56+8*m27+8*m47-4*m69-4*m58-4*m89;
b(31)=-2*m11-2*m55+4*m44+2*m99+8*m24+4*m15+4*m22;
b(33)=4*m17+4*m13-4*m39-4*m35-4*m79-4*m57;
b(34)=4*m14-4*m45-4*m25-4*m29+4*m12-4*m49;
b(35)=2*m59-2*m19+m99+m11-2*m15+m55;
b(37)=2*mc2-2*mc4;
b(39)=4*m29-4*m25+4*m14-4*m49-4*m12+4*m45;
b(40)=2*mc7-2*mc3;
b(42)=4*m35-4*m57-8*m46+8*m28+4*m13+4*m79-4*m39-4*m17+8*m26-8*m48;
b(44)=-8*m36-4*m12-4*m29-8*m38+4*m14+4*m49+8*m67+4*m25+8*m78-4*m45;
b(45)=-4*m17+4*m13-4*m35+4*m57+4*m39-4*m79;
b(46)=-2*mc8+2*mc6;
b(48)=8*m23+4*m69-8*m47+4*m58-4*m89-8*m34+4*m18+8*m27-4*m16-4*m56;
b(50)=-8*m44+8*m66+8*m22-8*m33-8*m88+8*m77;
b(51)=-4*m16-8*m34-8*m23+8*m47+8*m27+4*m18+4*m56+4*m89-4*m69-4*m58;
b(53)=4*m12+8*m36-4*m29-4*m14+8*m67+4*m45-8*m38+4*m49-8*m78-4*m25;
b(54)=8*m46+8*m26-4*m13+4*m35-4*m57-4*m79-8*m28-8*m48+4*m17+4*m39;
b(55)=-4*m56+4*m89-4*m18+4*m16+4*m58-4*m69;
b(56)=mc1+mc9+mc5;
b(58)=-4*m15-2*m55+4*m44+2*m99-2*m11-8*m24+4*m22;
b(60)=4*m69+4*m16+8*m27+8*m34-8*m47+4*m58+4*m18+4*m56-8*m23+4*m89;
b(61)=2*m55-2*m11-2*m99-8*m37+4*m33-4*m19+4*m77;
b(63)=8*m48+4*m35+4*m39+4*m13+4*m79+4*m17+8*m26+4*m57-8*m46-8*m28;
b(64)=-8*m36+8*m67+4*m12+8*m38+4*m14+4*m49+4*m25-8*m78+4*m45+4*m29;
b(65)=-4*m59-2*m99-8*m68-2*m55+4*m88+2*m11+4*m66;
b(67)=4*m29-4*m49+4*m25+4*m12-4*m45-4*m14;
b(68)=4*m17+4*m79-4*m39-4*m13+4*m57-4*m35;
b(69)=4*m69-4*m58-4*m89-4*m18+4*m16+4*m56;
b(70)=m99+m55+m11+2*m15+2*m19+2*m59;
c=sparse(zeros([292    1]));
c(16)=-1;


function [At,b,c,K,pars] = error_to_sedumi_planar(M,Mc,Mcc)
%
% transfers the function r'*M*r+r'*Mc+Mcc  with planar case 
% -> M([3,6,9],:)  approx zero  
% -> M(:,[3,6,9])  approx zero  
%
% constrains: r1 > 0 , ||r1..4|| = 1
% constrains: R(1,1) > 0 -> to fix the scale of the Rotation 
% but we use the data in it -> to get a better solution !
%

m11 = M(1,1);
m12 = M(1,2);
m13 = M(1,3);
m14 = M(1,4);
m15 = M(1,5);
m16 = M(1,6);
m17 = M(1,7);
m18 = M(1,8);
m19 = M(1,9);
mc1 = Mc(1);
m22 = M(2,2);
m23 = M(2,3);
m24 = M(2,4);
m25 = M(2,5);
m26 = M(2,6);
m27 = M(2,7);
m28 = M(2,8);
m29 = M(2,9);
mc2 = Mc(2);
m33 = M(3,3);
m34 = M(3,4);
m35 = M(3,5);
m36 = M(3,6);
m37 = M(3,7);
m38 = M(3,8);
m39 = M(3,9);
mc3 = Mc(3);
m44 = M(4,4);
m45 = M(4,5);
m46 = M(4,6);
m47 = M(4,7);
m48 = M(4,8);
m49 = M(4,9);
mc4 = Mc(4);
m55 = M(5,5);
m56 = M(5,6);
m57 = M(5,7);
m58 = M(5,8);
m59 = M(5,9);
mc5 = Mc(5);
m66 = M(6,6);
m67 = M(6,7);
m68 = M(6,8);
m69 = M(6,9);
mc6 = Mc(6);
m77 = M(7,7);
m78 = M(7,8);
m79 = M(7,9);
mc7 = Mc(7);
m88 = M(8,8);
m89 = M(8,9);
mc8 = Mc(8);
m99 = M(9,9);
mc9 = Mc(9);


pars.eps = 1e-12;
pars.alg = 2;
K.s=[5   5   1  15];
K.f=[16];
At=sparse(zeros([292   70]));
At(1,1)=-1;
At(1,3)=1;
At(1,10)=1;
At(1,26)=1;
At(1,56)=1;
At(2,36)=-1;
At(2,38)=1;
At(2,43)=1;
At(2,52)=1;
At(2,66)=1;
At(3,16)=-1;
At(3,18)=1;
At(3,23)=1;
At(3,32)=1;
At(3,62)=1;
At(4,6)=-1;
At(4,8)=1;
At(4,13)=1;
At(4,29)=1;
At(4,59)=1;
At(5,2)=-1;
At(5,4)=1;
At(5,11)=1;
At(5,27)=1;
At(5,57)=1;
At(6,56)=-1;
At(6,58)=1;
At(6,61)=1;
At(6,65)=1;
At(6,70)=1;
At(7,46)=-1;
At(7,48)=1;
At(7,51)=1;
At(7,55)=1;
At(7,69)=1;
At(8,26)=-1;
At(8,28)=1;
At(8,31)=1;
At(8,35)=1;
At(8,65)=1;
At(9,40)=-1;
At(9,42)=1;
At(9,45)=1;
At(9,54)=1;
At(9,68)=1;
At(10,20)=-1;
At(10,22)=1;
At(10,25)=1;
At(10,34)=1;
At(10,64)=1;
At(11,10)=-1;
At(11,12)=1;
At(11,15)=1;
At(11,31)=1;
At(11,61)=1;
At(12,37)=-1;
At(12,39)=1;
At(12,44)=1;
At(12,53)=1;
At(12,67)=1;
At(13,17)=-1;
At(13,19)=1;
At(13,24)=1;
At(13,33)=1;
At(13,63)=1;
At(14,7)=-1;
At(14,9)=1;
At(14,14)=1;
At(14,30)=1;
At(14,60)=1;
At(15,3)=-1;
At(15,5)=1;
At(15,12)=1;
At(15,28)=1;
At(15,58)=1;
At(16,1)=1;
At(17,3)=-1;
At(17,10)=-1;
At(17,26)=1;
At(17,56)=1;
At(18,38)=-1;
At(18,43)=-1;
At(18,52)=1;
At(18,66)=1;
At(19,18)=-1;
At(19,23)=-1;
At(19,32)=1;
At(19,62)=1;
At(20,8)=-1;
At(20,13)=-1;
At(20,29)=1;
At(20,59)=1;
At(21,4)=-1;
At(21,11)=-1;
At(21,27)=1;
At(21,57)=1;
At(22,38)=-1;
At(22,43)=-1;
At(22,52)=1;
At(22,66)=1;
At(23,58)=-1;
At(23,61)=-1;
At(23,65)=1;
At(23,70)=1;
At(24,48)=-1;
At(24,51)=-1;
At(24,55)=1;
At(24,69)=1;
At(25,42)=-1;
At(25,45)=-1;
At(25,54)=1;
At(25,68)=1;
At(26,39)=-1;
At(26,44)=-1;
At(26,53)=1;
At(26,67)=1;
At(27,18)=-1;
At(27,23)=-1;
At(27,32)=1;
At(27,62)=1;
At(28,48)=-1;
At(28,51)=-1;
At(28,55)=1;
At(28,69)=1;
At(29,28)=-1;
At(29,31)=-1;
At(29,35)=1;
At(29,65)=1;
At(30,22)=-1;
At(30,25)=-1;
At(30,34)=1;
At(30,64)=1;
At(31,19)=-1;
At(31,24)=-1;
At(31,33)=1;
At(31,63)=1;
At(32,8)=-1;
At(32,13)=-1;
At(32,29)=1;
At(32,59)=1;
At(33,42)=-1;
At(33,45)=-1;
At(33,54)=1;
At(33,68)=1;
At(34,22)=-1;
At(34,25)=-1;
At(34,34)=1;
At(34,64)=1;
At(35,12)=-1;
At(35,15)=-1;
At(35,31)=1;
At(35,61)=1;
At(36,9)=-1;
At(36,14)=-1;
At(36,30)=1;
At(36,60)=1;
At(37,4)=-1;
At(37,11)=-1;
At(37,27)=1;
At(37,57)=1;
At(38,39)=-1;
At(38,44)=-1;
At(38,53)=1;
At(38,67)=1;
At(39,19)=-1;
At(39,24)=-1;
At(39,33)=1;
At(39,63)=1;
At(40,9)=-1;
At(40,14)=-1;
At(40,30)=1;
At(40,60)=1;
At(41,5)=-1;
At(41,12)=-1;
At(41,28)=1;
At(41,58)=1;
At(42,36)=1;
At(43,56)=1;
At(44,46)=1;
At(45,40)=1;
At(46,37)=1;
At(47,56)=1;
At(48,66)=1;
At(49,62)=1;
At(50,59)=1;
At(51,57)=1;
At(52,46)=1;
At(53,62)=1;
At(54,52)=1;
At(55,49)=1;
At(56,47)=1;
At(57,40)=1;
At(58,59)=1;
At(59,49)=1;
At(60,43)=1;
At(61,41)=1;
At(62,37)=1;
At(63,57)=1;
At(64,47)=1;
At(65,41)=1;
At(66,38)=1;
At(67,38)=-1;
At(67,43)=-1;
At(67,52)=1;
At(67,66)=1;
At(68,1)=1;
At(69,36)=1;
At(70,16)=1;
At(71,6)=1;
At(72,2)=1;
At(73,56)=1;
At(74,46)=1;
At(75,26)=1;
At(76,40)=1;
At(77,20)=1;
At(78,10)=1;
At(79,37)=1;
At(80,17)=1;
At(81,7)=1;
At(82,3)=1;
At(83,36)=1;
At(84,56)=1;
At(85,46)=1;
At(86,40)=1;
At(87,37)=1;
At(88,66)=1;
At(89,62)=1;
At(90,52)=1;
At(91,59)=1;
At(92,49)=1;
At(93,43)=1;
At(94,57)=1;
At(95,47)=1;
At(96,41)=1;
At(97,38)=1;
At(98,16)=1;
At(99,46)=1;
At(100,26)=1;
At(101,20)=1;
At(102,17)=1;
At(103,62)=1;
At(104,52)=1;
At(105,32)=1;
At(106,49)=1;
At(107,29)=1;
At(108,23)=1;
At(109,47)=1;
At(110,27)=1;
At(111,21)=1;
At(112,18)=1;
At(113,6)=1;
At(114,40)=1;
At(115,20)=1;
At(116,10)=1;
At(117,7)=1;
At(118,59)=1;
At(119,49)=1;
At(120,29)=1;
At(121,43)=1;
At(122,23)=1;
At(123,13)=1;
At(124,41)=1;
At(125,21)=1;
At(126,11)=1;
At(127,8)=1;
At(128,2)=1;
At(129,37)=1;
At(130,17)=1;
At(131,7)=1;
At(132,3)=1;
At(133,57)=1;
At(134,47)=1;
At(135,27)=1;
At(136,41)=1;
At(137,21)=1;
At(138,11)=1;
At(139,38)=1;
At(140,18)=1;
At(141,8)=1;
At(142,4)=1;
At(143,56)=1;
At(144,66)=1;
At(145,62)=1;
At(146,59)=1;
At(147,57)=1;
At(148,70)=1;
At(149,69)=1;
At(150,65)=1;
At(151,68)=1;
At(152,64)=1;
At(153,61)=1;
At(154,67)=1;
At(155,63)=1;
At(156,60)=1;
At(157,58)=1;
At(158,46)=1;
At(159,62)=1;
At(160,52)=1;
At(161,49)=1;
At(162,47)=1;
At(163,69)=1;
At(164,65)=1;
At(165,55)=1;
At(166,64)=1;
At(167,54)=1;
At(168,51)=1;
At(169,63)=1;
At(170,53)=1;
At(171,50)=1;
At(172,48)=1;
At(173,26)=1;
At(174,52)=1;
At(175,32)=1;
At(176,29)=1;
At(177,27)=1;
At(178,65)=1;
At(179,55)=1;
At(180,35)=1;
At(181,54)=1;
At(182,34)=1;
At(183,31)=1;
At(184,53)=1;
At(185,33)=1;
At(186,30)=1;
At(187,28)=1;
At(188,40)=1;
At(189,59)=1;
At(190,49)=1;
At(191,43)=1;
At(192,41)=1;
At(193,68)=1;
At(194,64)=1;
At(195,54)=1;
At(196,61)=1;
At(197,51)=1;
At(198,45)=1;
At(199,60)=1;
At(200,50)=1;
At(201,44)=1;
At(202,42)=1;
At(203,20)=1;
At(204,49)=1;
At(205,29)=1;
At(206,23)=1;
At(207,21)=1;
At(208,64)=1;
At(209,54)=1;
At(210,34)=1;
At(211,51)=1;
At(212,31)=1;
At(213,25)=1;
At(214,50)=1;
At(215,30)=1;
At(216,24)=1;
At(217,22)=1;
At(218,10)=1;
At(219,43)=1;
At(220,23)=1;
At(221,13)=1;
At(222,11)=1;
At(223,61)=1;
At(224,51)=1;
At(225,31)=1;
At(226,45)=1;
At(227,25)=1;
At(228,15)=1;
At(229,44)=1;
At(230,24)=1;
At(231,14)=1;
At(232,12)=1;
At(233,37)=1;
At(234,57)=1;
At(235,47)=1;
At(236,41)=1;
At(237,38)=1;
At(238,67)=1;
At(239,63)=1;
At(240,53)=1;
At(241,60)=1;
At(242,50)=1;
At(243,44)=1;
At(244,58)=1;
At(245,48)=1;
At(246,42)=1;
At(247,39)=1;
At(248,17)=1;
At(249,47)=1;
At(250,27)=1;
At(251,21)=1;
At(252,18)=1;
At(253,63)=1;
At(254,53)=1;
At(255,33)=1;
At(256,50)=1;
At(257,30)=1;
At(258,24)=1;
At(259,48)=1;
At(260,28)=1;
At(261,22)=1;
At(262,19)=1;
At(263,7)=1;
At(264,41)=1;
At(265,21)=1;
At(266,11)=1;
At(267,8)=1;
At(268,60)=1;
At(269,50)=1;
At(270,30)=1;
At(271,44)=1;
At(272,24)=1;
At(273,14)=1;
At(274,42)=1;
At(275,22)=1;
At(276,12)=1;
At(277,9)=1;
At(278,3)=1;
At(279,38)=1;
At(280,18)=1;
At(281,8)=1;
At(282,4)=1;
At(283,58)=1;
At(284,48)=1;
At(285,28)=1;
At(286,42)=1;
At(287,22)=1;
At(288,12)=1;
At(289,39)=1;
At(290,19)=1;
At(291,9)=1;
At(292,5)=1;
b=sparse(zeros([70   1]));
b(3)=-mc5-mc1+mc9;
b(5)=2*m15-2*m59+m55-2*m19+m99+m11;
b(7)=2*mc6+2*mc8;
b(9)=-4*m58+4*m89-4*m18-4*m56+4*m69-4*m16;
b(10)=-mc1+mc5-mc9;
b(12)=-2*m99+4*m88+4*m59+2*m11-2*m55+8*m68+4*m66;
b(14)=4*m58+4*m56-4*m16-4*m18-4*m89-4*m69;
b(15)=m99+2*m19+m11-2*m59-2*m15+m55;
b(17)=2*mc7+2*mc3;
b(19)=-4*m13-4*m57+4*m39+4*m79-4*m35-4*m17;
b(20)=2*mc4+2*mc2;
b(22)=8*m67-4*m45+8*m36-4*m12+4*m29+4*m49+8*m38-4*m25-4*m14+8*m78;
b(24)=4*m57-4*m17+8*m48+8*m46-4*m13+8*m28-4*m39+8*m26+4*m35-4*m79;
b(25)=4*m45-4*m12-4*m29+4*m25-4*m49-4*m14;
b(26)=-mc9+mc1-mc5;
b(28)=4*m33-2*m99-2*m11+8*m37+4*m77+4*m19+2*m55;
b(30)=-4*m56+8*m23+4*m16+8*m27+4*m18+8*m47+8*m34-4*m89-4*m58-4*m69;
b(31)=2*m99+8*m24+4*m22+4*m15+4*m44-2*m55-2*m11;
b(33)=4*m13-4*m57-4*m79+4*m17-4*m39-4*m35;
b(34)=4*m14-4*m45-4*m29-4*m49-4*m25+4*m12;
b(35)=m11-2*m15+2*m59+m55-2*m19+m99;
b(37)=2*mc2-2*mc4;
b(39)=4*m45+4*m29-4*m12-4*m49+4*m14-4*m25;
b(40)=2*mc7-2*mc3;
b(42)=4*m79-8*m46-8*m48+8*m26+8*m28-4*m57+4*m13+4*m35-4*m17-4*m39;
b(44)=4*m14-8*m38+8*m78-4*m29-4*m45+4*m25-8*m36-4*m12+4*m49+8*m67;
b(45)=4*m57-4*m35-4*m79+4*m13-4*m17+4*m39;
b(46)=2*mc6-2*mc8;
b(48)=-4*m56+4*m18-4*m16+8*m23+4*m69-8*m34+4*m58+8*m27-4*m89-8*m47;
b(50)=-8*m88+8*m66+8*m22-8*m33-8*m44+8*m77;
b(51)=4*m56-4*m16+8*m27+8*m47-8*m23-4*m58+4*m18+4*m89-8*m34-4*m69;
b(53)=8*m36+4*m45-4*m29+8*m67-8*m78-4*m25-8*m38+4*m12+4*m49-4*m14;
b(54)=8*m46-8*m28-4*m13-8*m48+4*m35+8*m26-4*m79+4*m39+4*m17-4*m57;
b(55)=-4*m18+4*m16+4*m89-4*m56+4*m58-4*m69;
b(56)=mc5+mc9+mc1;
b(58)=-8*m24-2*m55-2*m11-4*m15+2*m99+4*m44+4*m22;
b(60)=4*m16+4*m18+8*m34+4*m69+4*m89+8*m27-8*m47+4*m56-8*m23+4*m58;
b(61)=2*m55+4*m33-2*m99-8*m37+4*m77-2*m11-4*m19;
b(63)=8*m48+4*m57-8*m28+4*m79+8*m26+4*m39+4*m17+4*m35+4*m13-8*m46;
b(64)=-8*m78+4*m25+8*m67-8*m36+4*m12+4*m29+4*m49+8*m38+4*m45+4*m14;
b(65)=-2*m99-2*m55+4*m88+2*m11-8*m68+4*m66-4*m59;
b(67)=-4*m45+4*m29-4*m14+4*m25+4*m12-4*m49;
b(68)=4*m57+4*m17-4*m13+4*m79-4*m35-4*m39;
b(69)=-4*m58-4*m89+4*m16+4*m56+4*m69-4*m18;
b(70)=2*m15+2*m19+2*m59+m99+m55+m11;
c=sparse(zeros([292    1]));
c(16)=-1;


function [At,b,c,K,pars] = error_to_sedumi(M,Mc,Mcc)
%
% transfers the function r'*M*r+r'*Mc+Mcc 
%
% into a SDP problem -> which could be solved by sedumi
%
% constrains: r1 > 0 , ||r1..4|| = 1

pars.eps = 1e-12;
pars.alg = 2;

K.s = [5 15];
K.f = 16;
  
At=sparse(zeros([266   70]));
At(1,1)=-1;
At(1,3)=1;
At(1,10)=1;
At(1,26)=1;
At(1,56)=1;
At(2,36)=-1;
At(2,38)=1;
At(2,43)=1;
At(2,52)=1;
At(2,66)=1;
At(3,16)=-1;
At(3,18)=1;
At(3,23)=1;
At(3,32)=1;
At(3,62)=1;
At(4,6)=-1;
At(4,8)=1;
At(4,13)=1;
At(4,29)=1;
At(4,59)=1;
At(5,2)=-1;
At(5,4)=1;
At(5,11)=1;
At(5,27)=1;
At(5,57)=1;
At(6,56)=-1;
At(6,58)=1;
At(6,61)=1;
At(6,65)=1;
At(6,70)=1;
At(7,46)=-1;
At(7,48)=1;
At(7,51)=1;
At(7,55)=1;
At(7,69)=1;
At(8,26)=-1;
At(8,28)=1;
At(8,31)=1;
At(8,35)=1;
At(8,65)=1;
At(9,40)=-1;
At(9,42)=1;
At(9,45)=1;
At(9,54)=1;
At(9,68)=1;
At(10,20)=-1;
At(10,22)=1;
At(10,25)=1;
At(10,34)=1;
At(10,64)=1;
At(11,10)=-1;
At(11,12)=1;
At(11,15)=1;
At(11,31)=1;
At(11,61)=1;
At(12,37)=-1;
At(12,39)=1;
At(12,44)=1;
At(12,53)=1;
At(12,67)=1;
At(13,17)=-1;
At(13,19)=1;
At(13,24)=1;
At(13,33)=1;
At(13,63)=1;
At(14,7)=-1;
At(14,9)=1;
At(14,14)=1;
At(14,30)=1;
At(14,60)=1;
At(15,3)=-1;
At(15,5)=1;
At(15,12)=1;
At(15,28)=1;
At(15,58)=1;
At(16,1)=1;
At(17,36)=1;
At(18,56)=1;
At(19,46)=1;
At(20,40)=1;
At(21,37)=1;
At(22,56)=1;
At(23,66)=1;
At(24,62)=1;
At(25,59)=1;
At(26,57)=1;
At(27,46)=1;
At(28,62)=1;
At(29,52)=1;
At(30,49)=1;
At(31,47)=1;
At(32,40)=1;
At(33,59)=1;
At(34,49)=1;
At(35,43)=1;
At(36,41)=1;
At(37,37)=1;
At(38,57)=1;
At(39,47)=1;
At(40,41)=1;
At(41,38)=1;
At(42,1)=1;
At(43,36)=1;
At(44,16)=1;
At(45,6)=1;
At(46,2)=1;
At(47,56)=1;
At(48,46)=1;
At(49,26)=1;
At(50,40)=1;
At(51,20)=1;
At(52,10)=1;
At(53,37)=1;
At(54,17)=1;
At(55,7)=1;
At(56,3)=1;
At(57,36)=1;
At(58,56)=1;
At(59,46)=1;
At(60,40)=1;
At(61,37)=1;
At(62,66)=1;
At(63,62)=1;
At(64,52)=1;
At(65,59)=1;
At(66,49)=1;
At(67,43)=1;
At(68,57)=1;
At(69,47)=1;
At(70,41)=1;
At(71,38)=1;
At(72,16)=1;
At(73,46)=1;
At(74,26)=1;
At(75,20)=1;
At(76,17)=1;
At(77,62)=1;
At(78,52)=1;
At(79,32)=1;
At(80,49)=1;
At(81,29)=1;
At(82,23)=1;
At(83,47)=1;
At(84,27)=1;
At(85,21)=1;
At(86,18)=1;
At(87,6)=1;
At(88,40)=1;
At(89,20)=1;
At(90,10)=1;
At(91,7)=1;
At(92,59)=1;
At(93,49)=1;
At(94,29)=1;
At(95,43)=1;
At(96,23)=1;
At(97,13)=1;
At(98,41)=1;
At(99,21)=1;
At(100,11)=1;
At(101,8)=1;
At(102,2)=1;
At(103,37)=1;
At(104,17)=1;
At(105,7)=1;
At(106,3)=1;
At(107,57)=1;
At(108,47)=1;
At(109,27)=1;
At(110,41)=1;
At(111,21)=1;
At(112,11)=1;
At(113,38)=1;
At(114,18)=1;
At(115,8)=1;
At(116,4)=1;
At(117,56)=1;
At(118,66)=1;
At(119,62)=1;
At(120,59)=1;
At(121,57)=1;
At(122,70)=1;
At(123,69)=1;
At(124,65)=1;
At(125,68)=1;
At(126,64)=1;
At(127,61)=1;
At(128,67)=1;
At(129,63)=1;
At(130,60)=1;
At(131,58)=1;
At(132,46)=1;
At(133,62)=1;
At(134,52)=1;
At(135,49)=1;
At(136,47)=1;
At(137,69)=1;
At(138,65)=1;
At(139,55)=1;
At(140,64)=1;
At(141,54)=1;
At(142,51)=1;
At(143,63)=1;
At(144,53)=1;
At(145,50)=1;
At(146,48)=1;
At(147,26)=1;
At(148,52)=1;
At(149,32)=1;
At(150,29)=1;
At(151,27)=1;
At(152,65)=1;
At(153,55)=1;
At(154,35)=1;
At(155,54)=1;
At(156,34)=1;
At(157,31)=1;
At(158,53)=1;
At(159,33)=1;
At(160,30)=1;
At(161,28)=1;
At(162,40)=1;
At(163,59)=1;
At(164,49)=1;
At(165,43)=1;
At(166,41)=1;
At(167,68)=1;
At(168,64)=1;
At(169,54)=1;
At(170,61)=1;
At(171,51)=1;
At(172,45)=1;
At(173,60)=1;
At(174,50)=1;
At(175,44)=1;
At(176,42)=1;
At(177,20)=1;
At(178,49)=1;
At(179,29)=1;
At(180,23)=1;
At(181,21)=1;
At(182,64)=1;
At(183,54)=1;
At(184,34)=1;
At(185,51)=1;
At(186,31)=1;
At(187,25)=1;
At(188,50)=1;
At(189,30)=1;
At(190,24)=1;
At(191,22)=1;
At(192,10)=1;
At(193,43)=1;
At(194,23)=1;
At(195,13)=1;
At(196,11)=1;
At(197,61)=1;
At(198,51)=1;
At(199,31)=1;
At(200,45)=1;
At(201,25)=1;
At(202,15)=1;
At(203,44)=1;
At(204,24)=1;
At(205,14)=1;
At(206,12)=1;
At(207,37)=1;
At(208,57)=1;
At(209,47)=1;
At(210,41)=1;
At(211,38)=1;
At(212,67)=1;
At(213,63)=1;
At(214,53)=1;
At(215,60)=1;
At(216,50)=1;
At(217,44)=1;
At(218,58)=1;
At(219,48)=1;
At(220,42)=1;
At(221,39)=1;
At(222,17)=1;
At(223,47)=1;
At(224,27)=1;
At(225,21)=1;
At(226,18)=1;
At(227,63)=1;
At(228,53)=1;
At(229,33)=1;
At(230,50)=1;
At(231,30)=1;
At(232,24)=1;
At(233,48)=1;
At(234,28)=1;
At(235,22)=1;
At(236,19)=1;
At(237,7)=1;
At(238,41)=1;
At(239,21)=1;
At(240,11)=1;
At(241,8)=1;
At(242,60)=1;
At(243,50)=1;
At(244,30)=1;
At(245,44)=1;
At(246,24)=1;
At(247,14)=1;
At(248,42)=1;
At(249,22)=1;
At(250,12)=1;
At(251,9)=1;
At(252,3)=1;
At(253,38)=1;
At(254,18)=1;
At(255,8)=1;
At(256,4)=1;
At(257,58)=1;
At(258,48)=1;
At(259,28)=1;
At(260,42)=1;
At(261,22)=1;
At(262,12)=1;
At(263,39)=1;
At(264,19)=1;
At(265,9)=1;
At(266,5)=1;

b=sparse(zeros([70   1]));
m11 = M(1,1);
m12 = M(1,2);
m13 = M(1,3);
m14 = M(1,4);
m15 = M(1,5);
m16 = M(1,6);
m17 = M(1,7);
m18 = M(1,8);
m19 = M(1,9);
mc1 = Mc(1);
m22 = M(2,2);
m23 = M(2,3);
m24 = M(2,4);
m25 = M(2,5);
m26 = M(2,6);
m27 = M(2,7);
m28 = M(2,8);
m29 = M(2,9);
mc2 = Mc(2);
m33 = M(3,3);
m34 = M(3,4);
m35 = M(3,5);
m36 = M(3,6);
m37 = M(3,7);
m38 = M(3,8);
m39 = M(3,9);
mc3 = Mc(3);
m44 = M(4,4);
m45 = M(4,5);
m46 = M(4,6);
m47 = M(4,7);
m48 = M(4,8);
m49 = M(4,9);
mc4 = Mc(4);
m55 = M(5,5);
m56 = M(5,6);
m57 = M(5,7);
m58 = M(5,8);
m59 = M(5,9);
mc5 = Mc(5);
m66 = M(6,6);
m67 = M(6,7);
m68 = M(6,8);
m69 = M(6,9);
mc6 = Mc(6);
m77 = M(7,7);
m78 = M(7,8);
m79 = M(7,9);
mc7 = Mc(7);
m88 = M(8,8);
m89 = M(8,9);
mc8 = Mc(8);
m99 = M(9,9);
mc9 = Mc(9);


b(3)=mc9-mc5-mc1;
b(5)=-2*m59+m55+m99-2*m19+2*m15+m11;
b(7)=2*mc6+2*mc8;
b(9)=-4*m18+4*m69-4*m58-4*m56-4*m16+4*m89;
b(10)=-mc9+mc5-mc1;
b(12)=-2*m55+4*m88+4*m66-2*m99+2*m11+4*m59+8*m68;
b(14)=-4*m16+4*m58-4*m69-4*m18+4*m56-4*m89;
b(15)=m99+m55-2*m15+2*m19-2*m59+m11;
b(17)=2*mc3+2*mc7;
b(19)=-4*m35-4*m17-4*m13+4*m79-4*m57+4*m39;
b(20)=2*mc4+2*mc2;
b(22)=-4*m45+8*m67+8*m78+4*m29+8*m36-4*m25+4*m49-4*m14+8*m38-4*m12;
b(24)=-4*m17+8*m26+8*m46-4*m13-4*m79+8*m48-4*m39+8*m28+4*m35+4*m57;
b(25)=-4*m49+4*m25+4*m45-4*m14-4*m29-4*m12;
b(26)=-mc5+mc1-mc9;
b(28)=2*m55+8*m37+4*m77-2*m99+4*m19+4*m33-2*m11;
b(30)=4*m16-4*m58+8*m27-4*m56+4*m18+8*m47+8*m23-4*m89+8*m34-4*m69;
b(31)=8*m24+4*m15-2*m55+4*m44+2*m99+4*m22-2*m11;
b(33)=-4*m35-4*m39+4*m17-4*m79-4*m57+4*m13;
b(34)=-4*m49-4*m45+4*m12-4*m29-4*m25+4*m14;
b(35)=m99-2*m15+m55-2*m19+2*m59+m11;
b(37)=-2*mc4+2*mc2;
b(39)=-4*m25+4*m45-4*m49+4*m29-4*m12+4*m14;
b(40)=2*mc7-2*mc3;
b(42)=8*m26-8*m48-8*m46-4*m17+4*m79-4*m57-4*m39+4*m35+4*m13+8*m28;
b(44)=-8*m36-4*m29+8*m67+4*m49+4*m25-4*m12-4*m45+4*m14+8*m78-8*m38;
b(45)=4*m13-4*m79+4*m57+4*m39-4*m17-4*m35;
b(46)=-2*mc8+2*mc6;
b(48)=4*m58-4*m89-8*m34-4*m56+4*m69-8*m47+8*m23-4*m16+4*m18+8*m27;
b(50)=8*m77+8*m66+8*m22-8*m44-8*m88-8*m33;
b(51)=4*m56+4*m89-4*m58-4*m69+8*m47+4*m18-8*m34-4*m16+8*m27-8*m23;
b(53)=4*m49-4*m29-4*m25-8*m38+4*m45+8*m67-4*m14+4*m12+8*m36-8*m78;
b(54)=4*m39+4*m17-4*m79+8*m46-8*m28-8*m48-4*m13+8*m26+4*m35-4*m57;
b(55)=4*m89+4*m16+4*m58-4*m18-4*m56-4*m69;
b(56)=mc9+mc1+mc5;
b(58)=4*m22-4*m15-2*m11+4*m44-2*m55-8*m24+2*m99;
b(60)=4*m58-8*m47+8*m27+4*m69+4*m16+8*m34+4*m89+4*m56+4*m18-8*m23;
b(61)=2*m55-8*m37+4*m77-2*m99+4*m33-4*m19-2*m11;
b(63)=-8*m46+4*m79+4*m35+4*m17+8*m26+8*m48+4*m13-8*m28+4*m39+4*m57;
b(64)=-8*m78+8*m67+4*m14+4*m49-8*m36+4*m29+8*m38+4*m12+4*m25+4*m45;
b(65)=4*m88-8*m68+4*m66-4*m59-2*m99-2*m55+2*m11;
b(67)=4*m25-4*m14+4*m12+4*m29-4*m45-4*m49;
b(68)=4*m79+4*m17-4*m35+4*m57-4*m39-4*m13;
b(69)=-4*m58-4*m18+4*m69+4*m56+4*m16-4*m89;
b(70)=m99+2*m19+m55+m11+2*m59+2*m15;

c=sparse(zeros([266    1]));
c(16)=-1;

